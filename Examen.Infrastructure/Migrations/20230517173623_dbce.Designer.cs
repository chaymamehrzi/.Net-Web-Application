// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20230517173623_dbce")]
    partial class dbce
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.CentreVacincation", b =>
                {
                    b.Property<int>("CentreVacincationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CentreVacincationId"));

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<int>("NbrChaises")
                        .HasColumnType("int");

                    b.Property<int>("NumTelephone")
                        .HasColumnType("int");

                    b.Property<string>("ResponsableCentre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CentreVacincationId");

                    b.ToTable("centreVaccinations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Citoyen", b =>
                {
                    b.Property<string>("CIN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CitoyenId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroEvax")
                        .HasColumnType("int");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telephone")
                        .HasColumnType("int");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.HasKey("CIN");

                    b.ToTable("citoyens");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Exemple", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Exemples");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.RendezVous", b =>
                {
                    b.Property<string>("CitoyenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VaccinId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateVaccin")
                        .HasColumnType("datetime2");

                    b.Property<int>("NbreDoses")
                        .HasColumnType("int");

                    b.Property<string>("codeInfirmiere")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CitoyenId", "VaccinId", "DateVaccin");

                    b.HasIndex("VaccinId");

                    b.ToTable("rendezVous");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Vaccin", b =>
                {
                    b.Property<int>("VaccinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinId"));

                    b.Property<int?>("CentreVacinationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateValidation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fournisseur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("TypeVaccin")
                        .HasColumnType("int");

                    b.HasKey("VaccinId");

                    b.HasIndex("CentreVacinationId");

                    b.ToTable("vaccins");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Citoyen", b =>
                {
                    b.OwnsOne("Examen.ApplicationCore.Domain.Addresse", "Addresse", b1 =>
                        {
                            b1.Property<string>("CitoyenCIN")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("CodePostal")
                                .HasColumnType("int");

                            b1.Property<int>("Rue")
                                .HasColumnType("int");

                            b1.Property<string>("Ville")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CitoyenCIN");

                            b1.ToTable("citoyens");

                            b1.WithOwner()
                                .HasForeignKey("CitoyenCIN");
                        });

                    b.Navigation("Addresse")
                        .IsRequired();
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.RendezVous", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Citoyen", "Citoyen")
                        .WithMany("RendezVouss")
                        .HasForeignKey("CitoyenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Vaccin", "Vaccin")
                        .WithMany("RendezVouss")
                        .HasForeignKey("VaccinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citoyen");

                    b.Navigation("Vaccin");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Vaccin", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.CentreVacincation", "Centrevaccination")
                        .WithMany("vaccins")
                        .HasForeignKey("CentreVacinationId");

                    b.Navigation("Centrevaccination");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.CentreVacincation", b =>
                {
                    b.Navigation("vaccins");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Citoyen", b =>
                {
                    b.Navigation("RendezVouss");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Vaccin", b =>
                {
                    b.Navigation("RendezVouss");
                });
#pragma warning restore 612, 618
        }
    }
}
